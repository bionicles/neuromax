brick injector
deformable conv
capsules
reservoirs # Echo State Network: https://github.com/cameronosmith/Echo-State-Network/blob/master/EchoStateNetwork.py
differentiable neural dictionary https://github.com/mjacar/pytorch-nec/blob/master/dnd.py
add, subtract, multiply, divide
PRELU/RRELU
mixed convolutions
tfp layers
tfp distributions -- see helpers.add_distribution
tfp bijectors ?
replay buffer (duh) -- just using a list right now
tied-weight autoencoder?
pooling (ugh)
noise?
optimization problems https://arxiv.org/pdf/1703.00443.pdf
neural ode
infinite set convolutions (recursion or np.indices)
subpixel conv
look at multiply layers ... like attention
maxout
RNNs could go back in
could make the graphmodel a rnn cell to handle recurrent state ...
# Graph Conv: https://github.com/CyberZHG/keras-gcn/blob/master/keras_gcn/layers.py / https://github.com/tkipf/keras-gcn/blob/master/kegra/layers/graph.py
# Polymorphic: https://github.com/dip-scd/PolymorphicDense/blob/master/src/polymorphic_dense.py
# MOE: https://github.com/eminorhan/mixture-of-experts/blob/master/DenseMoE.py
# NALU: https://arxiv.org/pdf/1808.00508.pdf
# MDN: https://github.com/cpmpercussion/keras-mdn-layer/blob/master/mdn/__init__.py
clockwork RNN https://github.com/flandolfi/clockwork-rnn/blob/master/cwrnn.py https://arxiv.org/pdf/1402.3511.pdf
SWAG https://arxiv.org/abs/1811.11813 y = Dense()([x, x^2, ..., x^N])
flow models
sensors
actuators
optimizers - lookahead https://github.com/bojone/keras_lookahead#lookahead-optimizer-for-keras https://arxiv.org/abs/1907.08610

done:
  differentiable neural computer
